---
title: "Exploratory Data Analysis, part 1"
author: "Amber Camp" ---> CHRISTIAN RAQUEPO
date: "`r Sys.Date()`"
format: html
editor: visual
---

## Exploratory Data Analysis Part 2

Continuing on from Part 1. Start by loading libraries and reading in data, as needed

## Libraries

```{r, message=FALSE}
library(tidyverse)
library(here)
library(janitor)
library(ggplot2)
```

## Data

Read in the data and clean the column headers using janitor.

```{r, message=FALSE}
pokedata <- read_csv(here("data/Pokemon.csv"))

pokedata <- pokedata %>%
  clean_names()
```

Remember we have some data that we want to treat as factor, so let's go ahead and convert them now. This is carried over from last class

```{r, message=FALSE, results='hide'}
#skim_data_before <- skimr::skim(pokedata)

pokedata$number <- as.factor(pokedata$number)
pokedata$type_1 <- as.factor(pokedata$type_1)
pokedata$name <- as.factor(pokedata$name)
pokedata$type_2 <- as.factor(pokedata$type_2)
pokedata$generation <- as.factor(pokedata$generation)

#skim_data <- skimr::skim(pokedata)
```

## Boxplot time!

How do we read boxplots? Also called box and whisker plot/diagram

-   Middle line: Median

-   Box: IQR (interquartile range)

-   Whiskers: range from min to max excluding outliers +/- SD

-   Dots: Outliers

```{r, message=FALSE}
ggplot(pokedata, aes(y = hp)) +
  geom_boxplot()

ggplot(pokedata, aes(x = type_1, y = hp)) +
  geom_boxplot()

ggplot(pokedata, aes(x = fct_reorder(type_1, hp, median), y = hp)) +
  geom_boxplot()

ggplot(pokedata, aes(x = fct_reorder(type_1, hp, median), y = hp)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5)

ggplot(pokedata, aes(x = type_1, y = hp)) +
  geom_boxplot() +
  facet_wrap(~generation) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

## Difference between \|\> and %\>%

-   \|\> is also called NATIVE PIPE / BASE R PIPE

-   %\>% is also called DPLYR PIPE / MAGRITTR PIPE / PIPE OPERATOR –\> requires dplyr

-   

## Tip!

If you keep getting a warning about NA, missing, or non-finite values being removed while plotting, you can use `na.rm = TRUE` to suppress that warning.

```{r, message=FALSE}
penguins_data <- read_csv(here("data/penguins_lter.csv"))

penguins_data <- penguins_data %>%
  clean_names()

ggplot(penguins_data, aes(x = flipper_length_mm)) +
  geom_histogram(binwidth = 1)
```

## Covariation

Covariation refers to the tendency of two or more variables to change together in a correlated manner. A good way to inspect covariation is through visualization.

Below are plots using `geom_freqpoly()`, a function in that creates a frequency polygon, which is a line graph used to represent the distribution of a continuous variable.

Unlike histograms, which use bars, frequency polygons use lines, making it easier to visualize the shape of the distribution and compare multiple groups on the same plot. You can also overlay multiple frequency polygons to compare the distributions of different groups or categories, using different colors or line types.

```{r, message=FALSE}
ggplot(pokedata, aes(x = defense)) + # this one displays counts
  geom_freqpoly(aes(color = generation), binwidth = 15, linewidth = 0.75)

ggplot(pokedata, aes(x = defense, y = after_stat(density))) + # this one displays density
  geom_freqpoly(aes(color = generation), binwidth = 15, linewidth = 0.75)
```

The difference between counts and density is that the counts represent raw total counts for each category/binwidth, while density shows the count standardized or normalized so that the area under each frequency polygon is one. The idea is that it puts all your data onto the same scale for interpretation. = similar distribution

Here is the same sort of example, this time using data from diamonds, which is already part of your ggplot2 package!

```{r, message=FALSE}
ggplot(diamonds, aes(x = price)) + 
  geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)

ggplot(diamonds, aes(x = price, y = after_stat(density))) + 
  geom_freqpoly(aes(color = cut), binwidth = 500, linewidth = 0.75)

# and a boxplot for good measure
ggplot(diamonds, aes(x = cut, y = price)) +
  geom_boxplot()

```

These data show that, contrary to expectations, better quality diamonds are perhaps generally cheaper than lower quality diamonds. This doesn't make sense. How do we dig deeper?

First, let's look at the different variables in the data

```{r, message=FALSE}
View(diamonds)
summary(diamonds)
```

Looks like there are other factors that may affect price–not just cut. Let's start with a basic scatterplot looking at price vs. carat.

```{r, message=FALSE}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(alpha=0.1) # try making the points transparent to 0.1
```

We can see the general trends, but it's a bit difficult to really see what is going on. Back to boxplots!

First, we'll try making a boxplot with x = carat and y = price

```{r, message=FALSE}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_boxplot()
```

This time, let's make the boxplots a bit more advanced. Here, we are binning carat into increments of 1, 0.5, and 0.1 for additional detail:

```{r, message=FALSE}
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 1)), orientation = "x")

ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.5)), orientation = "x")

ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), orientation = "x")
```

We can see the general trend that an increase in diamond carat size results in an Increase in price, with some outliers. We are getting closer to an answer, but what about color and clarity?

```{r, message=FALSE}
ggplot(diamonds, aes(x = color, y = price)) +
  geom_boxplot()

# automatically plots the factor color in alphabetical order.
# FYI, color D (colorless) is considered better quality than color J (near colorless, more yellow), so let's reverse the order

diamonds %>%
  mutate(color = fct_rev(color)) %>% # fct_rev(color) reverses the order of factors
  ggplot(aes(x = color, y = price)) +
  geom_boxplot()
```

Is there a relation between color and price? the better the color, the lower the price .

Let's try clarity (these are already in the "right" order).

```{r, message=FALSE}
ggplot(data = diamonds, aes(x = clarity, y = price)) +
  geom_boxplot()
```

What is the relationship here? the better the clarity, the less the price.

For color and clarity, is there more variation or covariation? COVARIATION = similar trend

Between color, clarity, and [*carat*]{.underline}, what is the best predictor of diamond prices?

Let's not forget about cut! Is there a relationship between cut and carat? Cut is categorical and carat is numeric, so we can plot the two together

```{r, message=FALSE}
ggplot(diamonds, aes(x = cut, y = carat)) +
  geom_boxplot()

ggplot(diamonds, aes(x = cut, y = carat)) + # this is called a count plot
  geom_count()

ggplot(diamonds, aes(x = cut, y = carat)) + # this is called a count plot
  geom_violin()
```

Observations:

-   Where do we see a lot of variability?

-   Is there a relationship between carat and cut?

-   Which category has the largest carat diamonds?

    -   Intermediate conclusions: The factor with the most influence on price is carat. There may be a trade-off between carat and cut. Perhaps larger diamonds can be profitably sold even with a low quality cut, for example.

We could stop here! But for fun, if you wanted to continue investigating, here are a couple more visualizations:

```{r, message=FALSE}
# this is an example of a count plot with two categorical variables
ggplot(diamonds, aes(x = cut, y = color)) +
  geom_count()

# this is called a tile plot or heatmap
diamonds %>% 
  count(color, cut) %>%  
  mutate(color = fct_rev(color)) %>%
  ggplot(aes(x = color, y = cut)) +
  geom_tile(aes(fill = n))


```
